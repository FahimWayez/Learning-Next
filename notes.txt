Class 1
# React use kori jokhon amader highly interactive or dynamic kind application banano lage jemon facebook insta eshob.

# But jinishta hoilo, emon onek website ase jegulate interaction eto lagena user er shathe...jemon wiki, ba kon landing page...egular kaj hoilo basically text image eshob diye just information show kora. Egulake static ba content driven sites bole. Next er one of the most primary goal is to expand the use of react, to help us make static sites.

Class 2
# Basically just ekta app banao, jetar kaj hoilo navigation bar e kisu link thakbe eketa page e jawar jonno, shob page e basic text thakbe basic image thakbe.

Class 3
# Amra je link ditesi, basically ekekta link ke press korle ekekta jaygay jabe etai chaitesi. To screen e eirokom different content show korar jonno amra nextjs er file based routing system use korbo. Eta kemne kaj kore? 

# Amader src folder er bhitore je page.tsx file ta ase, oikhane ekta react component ase, oita must thakai lagbe...ekta export default function. 

# Ekhon kotha hoilo, amader prottekta page er jonnoi erokom ekta kore page.tsx file ready korte hobe jegular bhitore contents thakbe. Ar prottekta page egula amra access korte parbo oi page ta kon folder e ase oitar nam diye.

Class 4
# Tinta folder create korsi src/app er bhitore, performance, reliability, scale. Ar protita folder er bhitore ekta kore page.tsx file create koris.

# Protita page.tsx er ekta export default react component thaka lagbe. Oita ja return korbe, amra oi route e giye oitai dekhte parbo

Class 5
# Ekhon onek page to banay felsi. Ebar oi page gular moddhe link kora lagbe amader. Etar jonno amra html er anchor tag use korsi aj porjonto...but ekhon theke next er ekta built in component use korbo jetar nam hoilo <Link>. Etar kaj e hoilo bibhinno routes er majhe navigate korano.


Class 6
# src/app er bhitore je globals.css file, etar kaj globally kisu ui design set kora...jemon first e next er chehara kalo thake. Ekhon egula shob delete kore disi next purai changed.

# layout.tsx file er kaj hoilo basically jodi amra emon kisu jinish chai jegula shobgula page ei dekha jabe...like navigation bar...tokhon amra ei layout.tsx e hat dite pari. Ei file eo ekta export default ase, jeta protita route er page.tsx file ke inherit kore. 

Class 7


Class 8
# amra jokhon konokisu import korbo, age diye ../ ../ egular bodole, @ use korle, easily import korte parbo. @ eta mean kore je src theke khuja shuru korbe. Etake absolute path bole

Class 10
# kono static page er moddhe chobi dite chaile oi chobigula public namer folder tay rakha lagbe. Ar image dewar jonno html e jemon img tag ase, ekhane erokom image tag ase which is more better. 

# Ei image tag the firstly jei kaj kore, suppose amar kase ekta chobi ase onek boro resolution er. But amar device onujayi oitake resize kora lagbe...next jeta kore, nije theke oitake resize kore ney kore cache te rekhe dey. 

Class 11
# Layout shifting is another reason that we use the image tag for. Layour shifting is basically, jodi karo khub slow internet thake, or ekta image suppose load hoite time lagtese...tokhon oi image er pasher kono text jodi thake taile shei text image er bodole theke jaite pare. Ar image load hoile layout ta change hoye image eshe gele eta disrupting. Eshober jonnoi amader image tag ta use korte pari. Etate image er ekta layout fix kore rakhe at least jate kore layout ta shift na hoy at least.


Class 12
# Reusable component hishebe amra hero ta ansi. Hero hoilo oi portion ta jeta te pisone image er upore boro kore lekha thake. Ei Hero ta resuable as in, ekhane scale reliablity ba home ba performance shob jaygay e eki template, just bhitorer properties different. Etar jonno interface use korsi.

# Interface basically hoilo ami je function Hero er ekta property pass kortesi, oikhane ekeketa ekekta na likhe ekta interface banaisi, oi interface e diye disi ki ki data type er property ar koyta property ashbe ekhane. 

Class 13
#Kisu styling add korsi just navbar ansi ar han tan

Class 14
# Next js banaise vercel name er ekta company. Vercel hosting service o provide kore. Vercel diye ami amar banano project deploy korte chaile command prompt e just likhte hobe npx vercel.

Class 18
# second project start. Eta basically ekta title dibo, code snippets likhbo, arek jaygay eta access pabo. Code snippet edit ba delete korte parbo. Tar jonno database lagbe. Ar ei database hishebe use kortesi sqlite. SQLite er jonno prisma lage, prisma install korsi, ar npx prisma init --datasource-provider sqlite diye database initialize korsi. Ekhon schema.prisma name ekta file create hoise. Ei file e shob data ja store korte chai egula define kore dite parbo.

# schema.prisma er bhitore dhuakar pore ekta notun model banaisi, and then oi model ta je use korbo eta bole disi shundor kore.

Class 20
# Ekhon je database banaisi, eta access korte amader project e shurute ekbar e shudhu ekta prisma client banay nite hobe.

# src folder e arekta folder banaisi db, oitar bhitore index.ts banailam. Ekhane export kortesi ekta object, db name er, eta amader database handle korar path. Eta use korei crud shob korbo.

# jemon db.snippet.create({
  data: {
    title: "Title",
    code: "const abc =  () => {}",
  },
});

eta diye ekta snippet create korsi jetay data hishebe disi ekta object jetay ase ekta title ar ekta code.


Class 21
# Basically ekta form banaisi, basic html css diyei. Tag gula ektu different, shob na but koyekta arki. Ektu layout change korsi. Ei form e ja dibo ta link er maddhome jay.


Class 22
# Jokhon keu create button tip dibe, mane hoilo she ekta notun snippet banaite chay. To amader oi information gula niye database e rakha lagbe jar jonno dorkar server er action, jeta porichito e Server Action name. Server action ekta function, jeta amra define korbo, eta automatically call hobe jokhon keu form ta submit korbe.

# Ekta next application e jekono kisu change korte chaile, as in create delete ba update jai hok first way hoilo server action call kora. 

# ekhane emon shob code thakbe ja database e notun record insert korbe, jar jonno amar prisma client import kora lagbe. This needs to be a server action as we are trying to change something

# "use server"; eta next er ekta jinish. Jokhon ekta async function er bhitore ei exact string ta she dekhe, she server action ke call korte hobe eta bujhe ney nije theke.

# Also, the inputs users are giving, we need to make sure that they are valid. Amra amader function er parameter hishebe formData pathaisi, jetar data type FormData. Eita ekta object jetar bhitore form er shob information gula thakbe.

# const title = formData.get("title"); ei value gula amra paitesi kemne? jokhon form submit kori, eta automatically link er maddhome form er data gula pathay dey...oikhan thekei fetch kore nitesi get method er maddhome. Ei value gula jokhon amra receive kori, typescript bujhe ney egular datatype hoy null, naile FormDataEntryValue...string na. Ekhon, amra je input nibo, amra shudhu string radio button checkbox number date badeo file o input nite pari. Tai typescript eta kore...FormDataEntryValue datatype e shob dhukay...jate eta string hok ba file hok ba jai hok amra jeno access korte pari as FormDataEntryValue type ei.

# const title = formData.get("title") as string; emne jodi nei, emne etake as string bole ditesi, jeno typescript etake FormDataEntryValue hishebe na niye string hishebei assume kore ney ekhon.

# Create a record in the database
    const snippet = await db.snippet.create({
      data: {
        title: title, 
        code: code,
      },
    });
    
    Duitai identical bole amra just title, code likhleo hoito
    const snippet = await db.snippet.create({
      data: {
        title, 
        code,
      },
    });

# To redirect the user to the root, basically amra jodi konodin forcibly navigate koraite chai jemon redirect koraite chai ekta user ke amader application er bhitore,  amader ekta function use korte hobe redirect name. Upore import korsi.

redirect("/"); 

eta root e redirect kore dey... ekhane bhitore path ta diye dilei hobe.

# <form action={createSnippet}> ekkhane action diye disi kothay jabe form ta submit button e create korle...ei action ta hoilo oi function ta jeta snippet create korbe ar database e add korbe.


Class 23
# Ekta traditional react app jeta kore, shobgula js ke browser e run koray. Ar jokhon kono data create ba jai hok kono request kori, eta ekta http request kore bairer ekta api server ke. Ei request gula fetch function ba axios library egula diye kora hoy.

# Next different. Next e joto code, tar kisu execute hoy browser e, baki kisu execute hoy next server e. Code exactly koi run hoitese eta bujha onek tough. Jemon amader "use server"; string te server ei thake, and eta server ei executed hoy. 

# Jemon amra je createSnippet function banailam, amra form fill in kore submit button click korle ei information gula post request er maddhome next server e jay. Next data egula receive kore server action e pass kore dey. Ekta notun snippet create hoy ar user ke redirect kore dey. Erpore next ekta response back kore je homoe page show kore dite. 

Class 24
# Ekhon kaj hoilo data gula database theke fetch kore, display korano. Jokhon e amra kono data fetch korte ba display koraite chai, amader jeta proyojon sheta hoilo ekta server component. 

# Amra already jani, kisu code next er execute hoy server e, kisu code execute hoy browser e. Next application gula dui dhoroner component niye built, server components, client components. 

# Client component ekta react component er motoi jinish, ekta function, jeta jsx return kore, jeta html e rendered hobe ar screen e display kore dibe. Client component react component er shob classic feature gula use korte parbe...jemon hooks, event handler..etc. 

# Server component ektu different...ektu rule break kore. Egulao function, erao jsx return kore but kisu additional limitations, additional capabilities ase eder. Generally next e server component use kore. Ete better performance ar better ux pawa jabe.

# All component amra ja banai next js e, by default shob server components. Server component er ekta boro feature hoilo, era async/await syntax component er body tei directly use korte pare. Jate shubidha hoilo, data fetch korte amader useState or useEffect use kora lagena.

# Limitations o ase onek. First limitation, server components kono hook use korte parbena. Jemon amra useState use korte parbona. Server components event handlers assign o korte parena. Jemon kono onClick event handler o use korte parbona.

# Client component bananor jonno file er ekdom upore shudhu ekta string likhte hobe "use client";. Ekhon ei component gula shob usual rules follow korte parbe...hooks, eventhandlers etc. But limittion hoilo, ekta client component ekta server component ke directly show koraite parbena. Taile motmat kotha hoilo amra client component tokhoni use korbo jokhon amader hook ba event handlers use korte hobe.

# Suppose ekta request pathano hoise server ke. Server component ba client component gula rendered hoye shathe shathe ekta html file pathay dey userer browser ke. Ei html er bhitore ekta script tag thake, jetate lakha ase next server e nojor dite ar try koro kisu js download korte. Abar next server e jawar pore joto component ase shobgula bhalo kore check kore, ogular bhitore javascript khujar try kore jegulay event handler state ba erokom jekono kisui thake, egula shobgulake ekta js file e ney, erpore user er kase pathay dey browser e.

# Ekhane ekta important jinish hoilo, jodio client component client side e execute hoy bolsi, but jokhon user first time server e request korbe client component gula ekbar server e rendered hobei.


Class 26
# Ekhon suppose ami kono specific id er snippet dekhte chaitesi. Tate link hobe erokom: localhost:3000/snippets/1. Mane 1 number id wala snippet er detail dekhte chai. Tate amar src/app er bhitore 1 nam diye ekta folder banay page.tsx banaite hobe. Erokom jodi 1000 ta thake amar 1000 ta folder banano lagbe. Jar jonno jeta kori amra, src/app er bhitore [id] nam diye ekta folder khuli...eta onekta ekta array of pages bola jay wild card er moto. localhost:3000/snippets/ er pore jai dekhbe 1 dekhuk 2 dekhuk o etar shathe match kore dekhbe age.

export default function SnippetShowPage(props: any) {
  console.log(props);
  return <div>Show a snippet</div>;
}

eta disi ar browser e to thikthak dekhsi e, console eo ashche amar property ta. Amra id hishebe number dileo, next etake string hishebei ney shobshomoy. So jodi proyojon lage amader eta cast kore newa lagte pare. Ar eikhane params hishebe id ashche cause ami src/app folder e je array of pages banaisi, oita id nam diye banano.

{ params: { id: '1' }, searchParams: {} }


Class 27
# function asyng banaisi.

# ekhon database connection dite db import korlam. Ebar jeta chinta sheta hoilo amra amader props er type disi any. Eta best practice na. What should we do is ekta interface banano, jetay description thakbe amader props er structure jate typescript bujhe ki ki property amra expect kortesi. 

interface SnippetShowPageProps {
  params: {
    id: string;
  };
}

Tai amra erokom ekta interface banay nisi, jeta define kore dey amra expect kortesi ekta param ashbe property te jetate thakbe id, jar datatype string.

# findFirst method diye amra database er kono particular record khuje ber kori.

#  const snippet = await db.snippet.findFirst({
    where: { id: parseInt(props.params.id) }, //parseInt ansi karon amader parameter e ashtese integer thik e, but amader param kintu id ke string hishebe dhore nitese.
  });

  Ekhane ekhon snippet er bhitore ja disi, eta return korbe either ekta object jetay thakbe id, title ar code, othoba oi specific id er shathe kono snippet nai hishab korle eta ekta null value return kore dibe. 


Class 28

# src/app e amra page.tsx khulsi. Eta ekta special file name. O folder e dhuke page.tsx dekhle oikhane dhuke dhukar pore shundor kore khuje pay bhitore ja ase shob. Erokhom aro kisu special file name ase...not-found.tsx, loading.tsx, error.tsx, route.tsx (route.tsx er kaj api endpoints define kora)

# not-found.tsx file ami banaisi src/app/[id] er bhitore. Eta jeta kore, age page.tsx khuje. page.tsx khuje na paile closet not-found.tsx khuje. Closes as in, ami src/app/[id] te na banay src/app e banaileo o khuje paito etake. 


Class 29

# src/app e arekta special file rakhte pari loading.tsx...ei file ta ekta component export korbe shudhumatro jokhon ekta server component is trying to fetch some data. Eta just user experience er jonno bhalo karon onekgula data database theke fetch korte jodi time lage tokhon user kisu ekta dekhar jonno pabe arki.

# Loading.tsx banaisi, but etar bhitorer jinish ekhon dekha jabena mane ekhon kaj korbena karon amader database locally e ase. Jodi amra ekta timeout function diye dei je database theke data ashte kisu shomoy lagbe taile loading ta dekha jaite pare. Even baire theke data newar shomoy to kisu time lagbei tokhono to dekha jabei.


Class 33

# First e basic add kore nisi data fetch korar jonno. Ekhon kaj jeta korbo edit korar jonno ekta code editor anbo application e. Etar jonno ekta third party package install kora lagbe...React Monaco Editor. Eta ekta react component...eta ekta fully featured code editor. Etar jonno amader requirement lage hooks, event handler eshob. Tar mane hoilo, ekhane amader client component lagbe. 

# Workflow hobe erokom: Amra age server client hishebe fetch korbo data ta. Erpore etake ekta snippet property hishebe pathabo client component er kase. Ei client component ta erpore hook ar event handler ja ja lagbe ta use korbe to set up and work with this monaco editor. 

Class 36

# Amra client component er bhitore kono server component er kisu use korte parbona. Jemon use server string, ba async await function body te dewa etc. But there is two options, jate kore amra server actions nite parbo client component er bhitore.

# Option 1 hoilo, amra ekta server action ke ekta server component er moddhe kore, etake ekta client component e props hishebe pass kore dite parbo. But etay ekta shomossha, usually server component client component er kase event handler pass kore dite parena. Eta ekta exception.

# Option 2 hoilo, amra amader project e ekta seperate file banay, oitar bhitore ek ba eker beshi server action define kore dite pari. Oitake export kore simply kono client component e niye nite parbo. Etay shubidha hoite pare like protita server action er age amader use server likhte hobena...eker beshi server action niye kaj korle amra ekbarei shobar upore use server likhe dilei hobe. 

Claa 38

# Server action Client component e call korar 2 ta option ase. Option 1 e amra ekta form banay oi form e amader server action er function ta  pass kore dibo. But jinish hoilo, amara to kono form fill in kortesina...ei information kono form thekeo ashbena. Ei information ashbe ekta function theke. Mane ekta state theke. Ei jinish implement korte amra bind function use korbo. Eta jehetu form nitese...mane hoilo user jokhon kono kisu submit korbe, amra tokkhon e eta access korte parbo.

# Option 2 amra jokhon tokhon use korte parbo. Mane jehetu kono form nai, so eta amra call korlei use kora jabe...like ekta key press korleo eta execute hoye jabe moton.

# Option 1 er benefit hoilo amra eta diye form create korte parbo jei form gula kaj korbe, even jodi user er browser javascript run na kore. Option 2 er shubidha hoilo amader bind function niye kono kaj nai...option 1 e bind function er kaj ase. Ar option 2 classic react behavior er khub close jar mane, amra kono data modify korte parbo amader server ei even without a user submits a form. 

# Next option 1 ke beshi favor kore. Kenona user er browser javascript allow na korleo jeno eta use kora jay.


Class 41

# Ekhon porjonto edit delete create er kaj shesh. But shomossha jeta hoilo sheta hoilo amra jodi ekhon kono empty data diye empty code ba empty title diye ekta snippet create kori, tateo amader snippet database e save hoye jay. Ekhon amader eta fix kora lagbe. Mane amader validation add kora lagbe. Egula general error handling.

# Jodi amra normal react component e use kortam taile eishob validation kora onek easy. Kintu amra server forms use kortesi, jetar shubidhai chilo je user er browser e jodi js na thake taholeo amra jeno kaj korte pari.

# Ekhon ei form er kaj gula hoy jebhabe, form theke server action e information gula jay, but jodi kono problem thake sheta ar back pathanor way nai. So ekhon amader jeta lagbe sheta hoilo ekta way, jate somehow ekta server action theke page e communicate kora jayy. Etar jonno amra ekta hook use korbo, useFormState namer.

# Ei error handling useFormState bade kaj kore jemne, suppose amader kisu page component ase jeta kisu html generate korbe user ke ekta form dekhabe. User tar form er data input diye save button click korle browser automatically shobgula info collect korbe form theke ar etake server action e pathay dibe ekta formData object hishebe. Ekhon jodi server action run howar pore realize kore ekhane kono issue ase, taile or kono way nai js chara abar etake rerender kore page component er kase ekta error message show korar. Ejonnoi amader useFormState use kora lagbe.

# Ekhon useFormState kemne kaj kore. Amra same page component er shathe ekta formState pathabo, jate thakbe ekta jinish, ekt amessage string type er. Same bhabe page component html generate korbe browser e dekhabe, shathe oi formState tao pathay dibe. Ekhon user same bhabe form fill in kore save button click korbe, ar browser automatically shobgula infor collect kore form theke etake server action e pathay dibe ekta formData object hishbe, shathe oi empty string wala formState tao pathabe. Server action ebar jodi realize kore je ekhane kono issue ase, ebar o communicate korar jonno oi formState er message e je error message oita pass kore dibe, ar oita pore browser e user ke show korabe abar as usual way te.

Class 44
# Ekhon amra basic form validation shesh korsi. But ekhon suppose, amader database connect hoite partesena...tokhon runtime error dibe amaderke. Ei error handle kore shundor ekta message dekhano uchit instead of showing that big runtime error type messag. Etar jonno o amra oi specal file name use korbo src/app er bhitore error.tsx nam er. 

# src/app er bhitore special file error.tsx must be a client component. But etar ekta problem hoilo, hae thikase eta user ke thrown error dekhay dibe ekta friendly way te, but eta database connection na paile erpore abar form ta dekhay deyna user ke je abar resubmit korar try koro emne. Ekhon amader jeta kora lagbe, sheta hoilo, kono error throw kora jabena. Just ekta message return kore dite hobe.


Class 45
# npm run build dilam. Ete kore amader application e jotogula routes ase shobgula show kortese. Ebar npm run start dilam application ke production mode e chalu korlam. Kore ekta notun snippet create korlam. Kintu jhamela hoilo jeta sheta hoilo, ei notun snippet ar dekha jaitesena. Ba kono snippet delete korleo oita dekhaitese still.

Class 46
# Problem er karon caching. Next caching implement kore onekgula location e. Jetai ei dhoroner unexpected behavior er karon. Next e chaching implement er jonno ase data cache, router cache, request memorization, full route cache. Tar moddhe data, router, request memorization eshob caching system run hoy jokhon application develop kortesi...mane developing mode e ase. 

# But jokhon amra amader application production er jonno build kori, tokhon full route caching system use hoy.

# Amra first e korsilam npm run build, next application er shobgula route khuje nisilo tokhon. Tar moddhe ekta chilo home route (src/app/page.tsx). Ei file er kaj hoilo ei file ta rendered hoile eita database e jay shobgula snippets ney erpore taderke screen e dekhay dey simply. Erpore next route tar upore ektu analysis chalay, je ei page ta static naki dynamic. Home page ta jehetu static khuje paise, next ei route er upor onek aggressive caching apply korbe. Mane hoilo, static dekhle next ei home page ke build time ei render kore nise. Render kore database theke jinishpati ene ekta html banay next server e diye rakhse. To porerbar jokhon amader kono jinish add kortesi ba delete kortesi, thik e database e add ba delete hoitese, but cache thekei show kortese amader home page, updated page show korte partesena. Jeta first e render kora, oitai barbar shobaike dekhabe.

Class 47
# Ekhon kotha hoilo amra kemne bujhbo amader application e konta static konta dynamic route? Amra abar dilam npm run build.

  Route (app)                              Size     First Load JS
  ┌ ○ /                                    175 B          93.8 kB
  ├ ○ /_not-found                          875 B          87.8 kB
  ├ ƒ /snippets/[id]                       176 B          93.8 kB
  ├ ƒ /snippets/[id]/edit                  4.67 kB        91.6 kB
  └ ○ /snippets/new                        791 B          87.7 kB
  + First Load JS shared by all            86.9 kB
    ├ chunks/23-0f744506974b7ec9.js        31.4 kB
    ├ chunks/fd9d1056-be48aeae6e94b8d1.js  53.7 kB
    └ other shared chunks (total)          1.88 kB


  ○  (Static)   prerendered as static content
  ƒ  (Dynamic)  server-rendered on demand

  Eta ashche output.

  Ekhane amader application er shobgula routes dekha jaitese. Dekhle dekha jay ekhane dui dhoroner bullet points ase, ekta gol, ekta f er moto. Gol jegula, ogular mane hoilo next mone kortese ei route gular bhitore shudhu static data ase. Next ei page gula ekhon render korbe, ekbar e korbe, and protibar ei rendered etai dekhabe. 

  Ar f er moto oigula dynamic data ase hishebe dhore ney next. Oigula next barbar render korbe jokhoni keu oi page visit korbe.

# Ekhon kotha hoilo, next ei dynamic ar static route kemne decide kortese je konta kon dhoroner route? Basically, shobgula page e default static. Ogula tokhoni dynamic route hoy, jokhon route rendering er shomoy next dekhe bhitore at least ekta dynamic function call kora ase ba ekta dynamic variable ke refer kora hoitese (jemon cookies.set(), cookies.delete(), useSearchParams(), etc...), kingba specific kono route segment config option assigned thakle, kingba fetch function call korle, ba onno kono dynamic route use korle.

# export const dynamic = "force-dynamic"; eta use korle forcefully ei page ke dynamic bhabbe next.


Class 48
# Next amader homepage ke static hishebe dhore ney mane eta build time ei build hobe ar same html file reuse kore. Ebar amader target hoilo, ei page ke static e rakha,karon caching bhalo, caching e khub fast kaj kore, but current eirokom implementation ta change kora lagbe. Etar jonno amader caching control kora lagbe.

# Caching contol korte, amra time based caching rules implement korte pari, mane ekta specific time pore pore caching drop korbe drop kore notun bhabe render korbe. Kingba amra on-demand caching control setup korte parbo, mane amra jokhon chabo forcibly caching drop kore rerender korte parbo. Othoba amra simply caching disable e kore dite pari.

# Time based caching er khetre, amader special ekta variable nam ase "revalidate" namer. Amra eta use korte pari, etar moddhe joto value dibo toto second kporpor eta nije nije rerender hobe.

  export const revalidate = 3; 
  export default async function page(){
    const snippets = await db.snippets.findMany();

    return <div>{snippets.map(..)}</div>
  }

  Ekhane revalidate er value 3 disi mane hoilo 3 second porpor eta nije nije rerender hobe.

  But eta amra use korbo kokhon? Suppose kono newsfeed ba website er front page...ekhane regular data shobshomoy refresh marle change hoyna...karon 1-2 mnt er old data dekhanote khoti nai kono.

# On-demand  er khetre amader jokhon mone hobe je ekhon rerender kora uchit tokhon amra cache dump kore dibo. Etar jonno ekta library import kora lage.

  import {revalidate} from "next/cache"
  revalidatePath("/snippets");

  Eta kokhon use korbo? Jemon amader ei application eta. Amra jokhon kisu change korbo amra janbo je data change hoitese. So jokhon chabo je user up to date data dekhbe, tokhon tokhon amra rerender korabo. Ar oita tokhoni jokhon amader ekhane create delete ba edit function gula use hobe.

# Othoba amra chaile caching disable e kore rakhte pari. Amra chaile revlidate variable er value 0 kore rakhte parbo, or dynamic variable er value "force-dynamic" kore dite pari. Eta kokohon use korbo? Jokhon amder next server kono bairer api theke data use korbe, jekhane amra janina kokhon data change hobe othoba amra jodi emon expect kori je proti request er shathe data change hobe othoba jokhon user shobshomoy chay up to date data dekhte, tokhon.


Class 50
# Ekhon bepar hoilo, amader static page gula caching kore automatic thikase. Dynamic gula default kintu caching korena...tate amader caching er shubidha miss jaitese. Class 46 er motoi, abar amra npm run build dilam, o shobgula route khuje anlo age. Dekhlo /snippets/[id] eta kon dhoroner page static na dynamic. Dekhlo dynamic. Taile caching korbena. But amra still chaile caching implement korte pari ei page er jonno. Ekta function ase "generateStaticParams". Eta jemen kaj kore, eta build time e jabe database e. Giye jotogula existing snippet ase shob nibe, ar protitar jonno ekta kore id rakhbe. id nam karon amader route er nam ei [id] ase. Ar jehetu build time e, so ei function er through te oi oi id er snippet gula age theke pre render hoye thakbe first e.



Third project
Class 52
# Prisma abar use korbo. Jar maddhome easily database access korte parbo amra. Arekta library use korbo nextui namer, eta ekta component library, eta nicely tailwind er shathe kaj kore. Onekgula component directly use korte parbo ekhane. Finally, authentication er jonno next-auth/authjs namer ekta library use korbo. Signup signin er jonno github oauth use korbo. 


Class 54
# Error: It's currently unsupported to use "export *" in a client boundary. Please use named exports instead. Ei error dicchilo, node_modules/@nextui-org/system/dis/index.mjs theke // export { Provider } from "@nextui-org/system-rsc"; ei line comment kore disi